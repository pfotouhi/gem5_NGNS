diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/BasicLink.cc gem5/src/mem/ruby/network/BasicLink.cc
--- gem5_NGNS/src/mem/ruby/network/BasicLink.cc	2019-01-23 16:20:32.243067700 -0800
+++ gem5/src/mem/ruby/network/BasicLink.cc	2018-11-01 14:48:39.123890411 -0700
@@ -34,6 +34,7 @@
     m_latency = p->latency;
     m_bandwidth_factor = p->bandwidth_factor;
     m_weight = p->weight;
+    m_isOptical = p->isOptical;    
 }
 
 void
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/BasicLink.hh gem5/src/mem/ruby/network/BasicLink.hh
--- gem5_NGNS/src/mem/ruby/network/BasicLink.hh	2019-01-23 16:20:32.243067700 -0800
+++ gem5/src/mem/ruby/network/BasicLink.hh	2018-11-01 14:48:18.251109612 -0700
@@ -55,6 +55,7 @@
     Cycles m_latency;
     int m_bandwidth_factor;
     int m_weight;
+    int m_isOptical; 
 };
 
 inline std::ostream&
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/BasicLink.py gem5/src/mem/ruby/network/BasicLink.py
--- gem5_NGNS/src/mem/ruby/network/BasicLink.py	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/BasicLink.py	2018-11-01 14:48:00.562448029 -0700
@@ -40,6 +40,7 @@
     # Garnet models this by flit size
     bandwidth_factor = Param.Int("generic bandwidth factor, usually in bytes")
     weight = Param.Int(1, "used to restrict routing in shortest path analysis")
+    isOptical = Param.Int(0, "For energy estimations from stats.txt file, links can be optical or electrical (default)")
 
 class BasicExtLink(BasicLink):
     type = 'BasicExtLink'
@@ -47,6 +48,7 @@
     ext_node = Param.RubyController("External node")
     int_node = Param.BasicRouter("ID of internal node")
     bandwidth_factor = 16 # only used by simple network
+    isOptical = 0
 
 class BasicIntLink(BasicLink):
     type = 'BasicIntLink'
@@ -60,3 +62,4 @@
 
     # only used by simple network
     bandwidth_factor = 16
+    isOptical = 0
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/BasicRouter.cc gem5/src/mem/ruby/network/BasicRouter.cc
--- gem5_NGNS/src/mem/ruby/network/BasicRouter.cc	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/BasicRouter.cc	2018-09-05 14:21:02.879906749 -0700
@@ -33,6 +33,7 @@
 {
     m_id = p->router_id;
     m_latency = p->latency;
+    m_outlink_bw_divider = p->outlink_bw_divider; // SEB
 }
 
 void
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/BasicRouter.hh gem5/src/mem/ruby/network/BasicRouter.hh
--- gem5_NGNS/src/mem/ruby/network/BasicRouter.hh	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/BasicRouter.hh	2018-09-05 12:25:27.120133670 -0700
@@ -52,6 +52,7 @@
     //
     uint32_t m_id;
     uint32_t m_latency;
+    uint32_t m_outlink_bw_divider; // SEB: 2 means half BW, 4 quarter, etc.  
 };
 
 inline std::ostream&
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/BasicRouter.py gem5/src/mem/ruby/network/BasicRouter.py
--- gem5_NGNS/src/mem/ruby/network/BasicRouter.py	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/BasicRouter.py	2018-09-06 13:58:28.079276667 -0700
@@ -37,3 +37,4 @@
 
     # only used by garnet
     latency   = Param.Cycles(1, "number of cycles inside router")
+    outlink_bw_divider = Param.Int(1, "ratio between router BW and outlink BW")
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/garnet2.0/CommonTypes.hh gem5/src/mem/ruby/network/garnet2.0/CommonTypes.hh
--- gem5_NGNS/src/mem/ruby/network/garnet2.0/CommonTypes.hh	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/garnet2.0/CommonTypes.hh	2018-06-19 11:43:30.327720975 -0700
@@ -31,8 +31,8 @@
  */
 
 
-#ifndef __MEM_RUBY_NETWORK_GARNET2_0_COMMONTYPES_HH__
-#define __MEM_RUBY_NETWORK_GARNET2_0_COMMONTYPES_HH__
+#ifndef __MEM_RUBY_NETWORK_GARNET_COMMONTYPES_HH__
+#define __MEM_RUBY_NETWORK_GARNET_COMMONTYPES_HH__
 
 #include "mem/ruby/common/NetDest.hh"
 
@@ -62,4 +62,4 @@
 
 #define INFINITE_ 10000
 
-#endif //__MEM_RUBY_NETWORK_GARNET2_0_COMMONTYPES_HH__
+#endif // __MEM_RUBY_NETWORK_GARNET_COMMONTYPES_HH__
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/garnet2.0/Credit.hh gem5/src/mem/ruby/network/garnet2.0/Credit.hh
--- gem5_NGNS/src/mem/ruby/network/garnet2.0/Credit.hh	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/garnet2.0/Credit.hh	2018-06-19 11:43:30.307720212 -0700
@@ -31,8 +31,8 @@
  */
 
 
-#ifndef __MEM_RUBY_NETWORK_GARNET2_0_CREDIT_HH__
-#define __MEM_RUBY_NETWORK_GARNET2_0_CREDIT_HH__
+#ifndef __MEM_RUBY_NETWORK_GARNET_CREDIT_HH__
+#define __MEM_RUBY_NETWORK_GARNET_CREDIT_HH__
 
 #include <cassert>
 #include <iostream>
@@ -57,4 +57,4 @@
     bool m_is_free_signal;
 };
 
-#endif // __MEM_RUBY_NETWORK_GARNET2_0_CREDIT_HH__
+#endif // __MEM_RUBY_NETWORK_GARNET_CREDIT_HH__
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/garnet2.0/CreditLink.hh gem5/src/mem/ruby/network/garnet2.0/CreditLink.hh
--- gem5_NGNS/src/mem/ruby/network/garnet2.0/CreditLink.hh	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/garnet2.0/CreditLink.hh	2018-06-19 11:43:30.355722046 -0700
@@ -31,8 +31,8 @@
  */
 
 
-#ifndef __MEM_RUBY_NETWORK_GARNET2_0_CREDITLINK_HH__
-#define __MEM_RUBY_NETWORK_GARNET2_0_CREDITLINK_HH__
+#ifndef __MEM_RUBY_NETWORK_GARNET_CREDIT_LINK_HH__
+#define __MEM_RUBY_NETWORK_GARNET_CREDIT_LINK_HH__
 
 #include "mem/ruby/network/garnet2.0/NetworkLink.hh"
 #include "params/CreditLink.hh"
@@ -44,4 +44,4 @@
     CreditLink(const Params *p) : NetworkLink(p) {}
 };
 
-#endif // __MEM_RUBY_NETWORK_GARNET2_0_CREDITLINK_HH__
+#endif // __MEM_RUBY_NETWORK_GARNET_CREDIT_LINK_HH__
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/garnet2.0/CrossbarSwitch.hh gem5/src/mem/ruby/network/garnet2.0/CrossbarSwitch.hh
--- gem5_NGNS/src/mem/ruby/network/garnet2.0/CrossbarSwitch.hh	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/garnet2.0/CrossbarSwitch.hh	2018-06-19 11:43:30.319720670 -0700
@@ -31,8 +31,8 @@
  */
 
 
-#ifndef __MEM_RUBY_NETWORK_GARNET2_0_CROSSBARSWITCH_HH__
-#define __MEM_RUBY_NETWORK_GARNET2_0_CROSSBARSWITCH_HH__
+#ifndef __MEM_RUBY_NETWORK_GARNET_CROSSBAR_SWITCH_HH__
+#define __MEM_RUBY_NETWORK_GARNET_CROSSBAR_SWITCH_HH__
 
 #include <iostream>
 #include <vector>
@@ -70,4 +70,4 @@
     std::vector<OutputUnit *> m_output_unit;
 };
 
-#endif // __MEM_RUBY_NETWORK_GARNET2_0_CROSSBARSWITCH_HH__
+#endif // __MEM_RUBY_NETWORK_GARNET_CROSSBAR_SWITCH_HH__
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/garnet2.0/flitBuffer.hh gem5/src/mem/ruby/network/garnet2.0/flitBuffer.hh
--- gem5_NGNS/src/mem/ruby/network/garnet2.0/flitBuffer.hh	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/garnet2.0/flitBuffer.hh	2018-06-19 11:43:30.327720975 -0700
@@ -31,8 +31,8 @@
  */
 
 
-#ifndef __MEM_RUBY_NETWORK_GARNET2_0_FLITBUFFER_HH__
-#define __MEM_RUBY_NETWORK_GARNET2_0_FLITBUFFER_HH__
+#ifndef __MEM_RUBY_NETWORK_GARNET_FLIT_BUFFER_HH__
+#define __MEM_RUBY_NETWORK_GARNET_FLIT_BUFFER_HH__
 
 #include <algorithm>
 #include <iostream>
@@ -91,4 +91,4 @@
     return out;
 }
 
-#endif // __MEM_RUBY_NETWORK_GARNET2_0_FLITBUFFER_HH__
+#endif // __MEM_RUBY_NETWORK_GARNET_FLIT_BUFFER_HH__
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/garnet2.0/flit.hh gem5/src/mem/ruby/network/garnet2.0/flit.hh
--- gem5_NGNS/src/mem/ruby/network/garnet2.0/flit.hh	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/garnet2.0/flit.hh	2018-06-19 11:43:30.299719906 -0700
@@ -31,8 +31,8 @@
  */
 
 
-#ifndef __MEM_RUBY_NETWORK_GARNET2_0_FLIT_HH__
-#define __MEM_RUBY_NETWORK_GARNET2_0_FLIT_HH__
+#ifndef __MEM_RUBY_NETWORK_GARNET_FLIT_HH__
+#define __MEM_RUBY_NETWORK_GARNET_FLIT_HH__
 
 #include <cassert>
 #include <iostream>
@@ -121,4 +121,4 @@
     return out;
 }
 
-#endif // __MEM_RUBY_NETWORK_GARNET2_0_FLIT_HH__
+#endif // __MEM_RUBY_NETWORK_GARNET_FLIT_HH__
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/garnet2.0/GarnetLink.cc gem5/src/mem/ruby/network/garnet2.0/GarnetLink.cc
--- gem5_NGNS/src/mem/ruby/network/garnet2.0/GarnetLink.cc	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/garnet2.0/GarnetLink.cc	2018-11-01 15:20:54.508418961 -0700
@@ -43,6 +43,9 @@
 
     m_network_link = p->network_link;
     m_credit_link = p->credit_link;
+
+    m_bandwidth_factor = p->bandwidth_factor; 
+    m_isOptical = 1; //p->isOptical;    
 }
 
 void
@@ -62,6 +65,43 @@
     return new GarnetIntLink(this);
 }
 
+void
+GarnetIntLink::regStats()
+{
+    BasicLink::regStats();
+
+    std::string isOpt; 
+    if(m_isOptical) isOpt = "optical";
+    else isOpt = "electrical";
+
+    m_intlink_traversals.name(name()+ "." + isOpt + ".NNNnumber_link_traversals" + 
+         std::to_string(m_network_link->get_src_node()) + 
+         "to" + std::to_string(m_network_link->get_dst_node()));
+}
+
+void
+GarnetIntLink::collateStats()
+{
+    m_intlink_traversals = this->m_network_link->getLinkUtilization();  
+}
+
+int
+GarnetIntLink::get_src_node(){
+ return src_node;
+}
+int
+GarnetIntLink::get_dst_node(){
+ return dst_node;
+}
+void
+GarnetIntLink::set_src_node(int src){
+  this->src_node = src;
+}
+void
+GarnetIntLink::set_dst_node(int dst){
+  this->dst_node = dst;
+}
+
 GarnetExtLink::GarnetExtLink(const Params *p)
     : BasicExtLink(p)
 {
@@ -92,3 +132,7 @@
 {
     return new GarnetExtLink(this);
 }
+
+
+
+
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/garnet2.0/GarnetLink.hh gem5/src/mem/ruby/network/garnet2.0/GarnetLink.hh
--- gem5_NGNS/src/mem/ruby/network/garnet2.0/GarnetLink.hh	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/garnet2.0/GarnetLink.hh	2018-11-01 14:45:57.029830464 -0700
@@ -31,8 +31,8 @@
  */
 
 
-#ifndef __MEM_RUBY_NETWORK_GARNET2_0_GARNETLINK_HH__
-#define __MEM_RUBY_NETWORK_GARNET2_0_GARNETLINK_HH__
+#ifndef __MEM_RUBY_NETWORK_GARNET_LINK_HH__
+#define __MEM_RUBY_NETWORK_GARNET_LINK_HH__
 
 #include <iostream>
 #include <string>
@@ -54,13 +54,29 @@
 
     void print(std::ostream& out) const;
 
+    void collateStats();
+    void regStats();
+
+    // These fields/functions are needed to identify individual links in topology (so far just for stat collection)    
+    int src_node;
+    int dst_node;
+    void set_src_node(int src);
+    void set_dst_node(int dst);
+    int get_src_node();
+    int get_dst_node();
+    int m_bandwidth_factor; // 
+    int m_isOptical;  // set if optical, electrical otherwise (at this point only for stats.txt file)   
+ 
     friend class GarnetNetwork;
 
   protected:
     NetworkLink* m_network_link;
     CreditLink* m_credit_link;
+
+    Stats::Scalar m_intlink_traversals; 
 };
 
+
 inline std::ostream&
 operator<<(std::ostream& out, const GarnetIntLink& obj)
 {
@@ -94,4 +110,4 @@
     return out;
 }
 
-#endif //__MEM_RUBY_NETWORK_GARNET2_0_GARNETLINK_HH__
+#endif // __MEM_RUBY_NETWORK_GARNET_LINK_HH__
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/garnet2.0/GarnetNetwork.cc gem5/src/mem/ruby/network/garnet2.0/GarnetNetwork.cc
--- gem5_NGNS/src/mem/ruby/network/garnet2.0/GarnetNetwork.cc	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/garnet2.0/GarnetNetwork.cc	2018-09-07 11:19:19.040082305 -0700
@@ -47,6 +47,9 @@
 #include "mem/ruby/network/garnet2.0/Router.hh"
 #include "mem/ruby/system/RubySystem.hh"
 
+#include <iostream>
+#include <fstream>
+
 using namespace std;
 using m5::stl_helpers::deletePointers;
 
@@ -149,6 +152,7 @@
     deletePointers(m_nis);
     deletePointers(m_networklinks);
     deletePointers(m_creditlinks);
+    deletePointers(m_garnetlinks); 
 }
 
 /*
@@ -226,6 +230,11 @@
     // GarnetIntLink is unidirectional
     NetworkLink* net_link = garnet_link->m_network_link;
     net_link->setType(INT_);
+    net_link->set_src_node((int) src); // added
+    net_link->set_dst_node((int) dest); // added
+    net_link->set_bw_factor(garnet_link->m_bandwidth_factor);
+
+
     CreditLink* credit_link = garnet_link->m_credit_link;
 
     m_networklinks.push_back(net_link);
@@ -235,6 +244,12 @@
     m_routers[src]->addOutPort(src_outport_dirn, net_link,
                                routing_table_entry,
                                link->m_weight, credit_link);
+
+   //
+   garnet_link->set_src_node((int) src);
+   garnet_link->set_dst_node((int) dest);
+   m_garnetlinks.push_back(garnet_link);
+
 }
 
 // Total routers in the network
@@ -401,6 +416,10 @@
     RubySystem *rs = params()->ruby_system;
     double time_delta = double(curCycle() - rs->getStartCycle());
 
+    ofstream myfile;
+    myfile.open("linktraversals.txt");
+    m_garnetlink_counter = 0;
+
     for (int i = 0; i < m_networklinks.size(); i++) {
         link_type type = m_networklinks[i]->getType();
         int activity = m_networklinks[i]->getLinkUtilization();
@@ -409,9 +428,17 @@
             m_total_ext_in_link_utilization += activity;
         else if (type == EXT_OUT_)
             m_total_ext_out_link_utilization += activity;
-        else if (type == INT_)
+        else if (type == INT_){
             m_total_int_link_utilization += activity;
-
+            m_garnetlinks[m_garnetlink_counter]->collateStats();
+            if(m_networklinks[i]->getLinkUtilization() != 0){
+	       myfile << "Number of link traversals from " 
+                      << to_string(m_networklinks[i]->get_src_node()) 
+                      << " to " << to_string(m_networklinks[i]->get_dst_node()) 
+                      << " is " << to_string(m_networklinks[i]->getLinkUtilization()) << endl; 
+	    } 
+            m_garnetlink_counter++;
+	}
         m_average_link_utilization +=
             (double(activity) / time_delta);
 
@@ -420,6 +447,7 @@
             m_average_vc_load[j] += ((double)vc_load[j] / time_delta);
         }
     }
+    myfile.close();
 
     // Ask the routers to collate their statistics
     for (int i = 0; i < m_routers.size(); i++) {
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/garnet2.0/GarnetNetwork.hh gem5/src/mem/ruby/network/garnet2.0/GarnetNetwork.hh
--- gem5_NGNS/src/mem/ruby/network/garnet2.0/GarnetNetwork.hh	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/garnet2.0/GarnetNetwork.hh	2018-06-19 11:43:30.335721281 -0700
@@ -31,8 +31,8 @@
  */
 
 
-#ifndef __MEM_RUBY_NETWORK_GARNET2_0_GARNETNETWORK_HH__
-#define __MEM_RUBY_NETWORK_GARNET2_0_GARNETNETWORK_HH__
+#ifndef __MEM_RUBY_NETWORK_GARNET_NETWORK_HH__
+#define __MEM_RUBY_NETWORK_GARNET_NETWORK_HH__
 
 #include <iostream>
 #include <vector>
@@ -42,6 +42,9 @@
 #include "mem/ruby/network/garnet2.0/CommonTypes.hh"
 #include "params/GarnetNetwork.hh"
 
+#include "mem/ruby/network/garnet2.0/GarnetLink.hh"
+
+
 class FaultModel;
 class NetworkInterface;
 class Router;
@@ -74,6 +77,7 @@
     bool isFaultModelEnabled() const { return m_enable_fault_model; }
     FaultModel* fault_model;
 
+    int m_garnetlink_counter; // needed for stats collection of individual links (only counting int-links here. Variable not needed for all links require stats collection)
 
     // Internal configuration
     bool isVNetOrdered(int vnet) const { return m_ordered[vnet]; }
@@ -183,6 +187,8 @@
     Stats::Scalar m_average_link_utilization;
     Stats::Vector m_average_vc_load;
 
+    Stats::Scalar m_router_traverals; 
+
     Stats::Scalar  m_total_hops;
     Stats::Formula m_avg_hops;
 
@@ -195,6 +201,7 @@
     std::vector<NetworkLink *> m_networklinks; // All flit links in the network
     std::vector<CreditLink *> m_creditlinks; // All credit links in the network
     std::vector<NetworkInterface *> m_nis;   // All NI's in Network
+    std::vector<GarnetIntLink *> m_garnetlinks; // Needed to collect stats for every individual links
 };
 
 inline std::ostream&
@@ -205,4 +212,4 @@
     return out;
 }
 
-#endif //__MEM_RUBY_NETWORK_GARNET2_0_GARNETNETWORK_HH__
+#endif // __MEM_RUBY_NETWORK_GARNET_NETWORK_HH__
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/garnet2.0/InputUnit.hh gem5/src/mem/ruby/network/garnet2.0/InputUnit.hh
--- gem5_NGNS/src/mem/ruby/network/garnet2.0/InputUnit.hh	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/garnet2.0/InputUnit.hh	2018-06-19 11:43:30.323720823 -0700
@@ -31,8 +31,8 @@
  */
 
 
-#ifndef __MEM_RUBY_NETWORK_GARNET2_0_INPUTUNIT_HH__
-#define __MEM_RUBY_NETWORK_GARNET2_0_INPUTUNIT_HH__
+#ifndef __MEM_RUBY_NETWORK_GARNET_INPUT_UNIT_HH__
+#define __MEM_RUBY_NETWORK_GARNET_INPUT_UNIT_HH__
 
 #include <iostream>
 #include <vector>
@@ -167,4 +167,4 @@
     std::vector<double> m_num_buffer_reads;
 };
 
-#endif // __MEM_RUBY_NETWORK_GARNET2_0_INPUTUNIT_HH__
+#endif // __MEM_RUBY_NETWORK_GARNET_INPUT_UNIT_HH__
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/garnet2.0/NetworkInterface.cc gem5/src/mem/ruby/network/garnet2.0/NetworkInterface.cc
--- gem5_NGNS/src/mem/ruby/network/garnet2.0/NetworkInterface.cc	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/garnet2.0/NetworkInterface.cc	2018-08-17 13:56:05.918078527 -0700
@@ -448,7 +448,7 @@
 
         // model buffer backpressure
         if (m_ni_out_vcs[vc]->isReady(curCycle()) &&
-            m_out_vc_state[vc]->has_credit()) {
+            m_out_vc_state[vc]->has_credit()) {   // SEB: has_credit function must be adapted to (link_BW/flit_width)
 
             bool is_candidate_vc = true;
             int t_vnet = get_vnet(vc);
@@ -470,6 +470,9 @@
             if (!is_candidate_vc)
                 continue;
 
+	    // SEB: Schedules flit to traverse outlink for next cycle
+	    //      instead of removing one, do everything for 
+	    //	    (link_BW / flit_width) flits (i.e. --credit, getTopFlit x2, etc.)
             m_out_vc_state[vc]->decrement_credit();
             // Just removing the flit
             flit *t_flit = m_ni_out_vcs[vc]->getTopFlit();
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/garnet2.0/NetworkInterface.hh gem5/src/mem/ruby/network/garnet2.0/NetworkInterface.hh
--- gem5_NGNS/src/mem/ruby/network/garnet2.0/NetworkInterface.hh	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/garnet2.0/NetworkInterface.hh	2018-06-19 11:43:30.347721740 -0700
@@ -31,8 +31,8 @@
  */
 
 
-#ifndef __MEM_RUBY_NETWORK_GARNET2_0_NETWORKINTERFACE_HH__
-#define __MEM_RUBY_NETWORK_GARNET2_0_NETWORKINTERFACE_HH__
+#ifndef __MEM_RUBY_NETWORK_GARNET_NETWORK_INTERFACE_HH__
+#define __MEM_RUBY_NETWORK_GARNET_NETWORK_INTERFACE_HH__
 
 #include <iostream>
 #include <vector>
@@ -118,4 +118,4 @@
     void incrementStats(flit *t_flit);
 };
 
-#endif // __MEM_RUBY_NETWORK_GARNET2_0_NETWORKINTERFACE_HH__
+#endif // __MEM_RUBY_NETWORK_GARNET_NETWORK_INTERFACE_HH__
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/garnet2.0/NetworkLink.cc gem5/src/mem/ruby/network/garnet2.0/NetworkLink.cc
--- gem5_NGNS/src/mem/ruby/network/garnet2.0/NetworkLink.cc	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/garnet2.0/NetworkLink.cc	2018-11-01 15:00:58.263621752 -0700
@@ -32,9 +32,12 @@
 
 
 #include "mem/ruby/network/garnet2.0/NetworkLink.hh"
-
 #include "mem/ruby/network/garnet2.0/CreditLink.hh"
 
+//
+#include "mem/ruby/network/garnet2.0/GarnetLink.hh"
+//
+
 NetworkLink::NetworkLink(const Params *p)
     : ClockedObject(p), Consumer(this), m_id(p->link_id),
       m_type(NUM_LINK_TYPES_),
@@ -102,3 +105,44 @@
 {
     return linkBuffer->functionalWrite(pkt);
 }
+
+int 
+NetworkLink::get_src_node(){
+ return src_node; 
+}
+
+int
+NetworkLink::get_dst_node(){
+ return dst_node;
+}
+
+void
+NetworkLink::set_src_node(int src){
+  this->src_node = src; 
+}
+
+void
+NetworkLink::set_dst_node(int dst){
+  this->dst_node = dst;
+}
+
+void
+NetworkLink::set_bw_factor(float bw_factor){
+   this->bw_factor = bw_factor; 
+}
+
+float 
+NetworkLink::get_bw_factor(){
+   return this->bw_factor; 
+}
+
+void
+NetworkLink::set_is_optical(int iso){
+   this->isOptical = iso;
+}
+
+int
+NetworkLink::get_is_optical(){
+   return this->isOptical;
+}
+
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/garnet2.0/NetworkLink.hh gem5/src/mem/ruby/network/garnet2.0/NetworkLink.hh
--- gem5_NGNS/src/mem/ruby/network/garnet2.0/NetworkLink.hh	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/garnet2.0/NetworkLink.hh	2018-11-01 15:00:44.415100798 -0700
@@ -31,8 +31,8 @@
  */
 
 
-#ifndef __MEM_RUBY_NETWORK_GARNET2_0_NETWORKLINK_HH__
-#define __MEM_RUBY_NETWORK_GARNET2_0_NETWORKLINK_HH__
+#ifndef __MEM_RUBY_NETWORK_GARNET_NETWORK_LINK_HH__
+#define __MEM_RUBY_NETWORK_GARNET_NETWORK_LINK_HH__
 
 #include <iostream>
 #include <vector>
@@ -40,8 +40,12 @@
 #include "mem/ruby/common/Consumer.hh"
 #include "mem/ruby/network/garnet2.0/CommonTypes.hh"
 #include "mem/ruby/network/garnet2.0/flitBuffer.hh"
+#include "mem/ruby/network/BasicLink.hh"
 #include "params/NetworkLink.hh"
 #include "sim/clocked_object.hh"
+//
+//#include "mem/ruby/network/garnet2.0/GarnetLink.hh"
+//
 
 class GarnetNetwork;
 
@@ -72,10 +76,26 @@
     uint32_t functionalWrite(Packet *);
     void resetStats();
 
+    int src_node;
+    int dst_node;
+    void set_src_node(int src);
+    void set_dst_node(int dst);
+    int get_src_node();
+    int get_dst_node();
+    
+    float bw_factor; // in relation to BW of router pipeline. E.g. 0.5 means half the BW
+    float get_bw_factor(); 
+    void set_bw_factor(float bw);
+    int isOptical; 
+    int get_is_optical();
+    void set_is_optical(int iso);
+
+
   private:
     const int m_id;
     link_type m_type;
     const Cycles m_latency;
+    Stats::Scalar m_intlink_traversals;
 
     flitBuffer *linkBuffer;
     Consumer *link_consumer;
@@ -86,4 +106,4 @@
     std::vector<unsigned int> m_vc_load;
 };
 
-#endif // __MEM_RUBY_NETWORK_GARNET2_0_NETWORKLINK_HH__
+#endif // __MEM_RUBY_NETWORK_GARNET_NETWORK_LINK_HH__
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/garnet2.0/OutputUnit.hh gem5/src/mem/ruby/network/garnet2.0/OutputUnit.hh
--- gem5_NGNS/src/mem/ruby/network/garnet2.0/OutputUnit.hh	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/garnet2.0/OutputUnit.hh	2018-09-07 12:46:07.155015709 -0700
@@ -31,8 +31,8 @@
  */
 
 
-#ifndef __MEM_RUBY_NETWORK_GARNET2_0_OUTPUTUNIT_HH__
-#define __MEM_RUBY_NETWORK_GARNET2_0_OUTPUTUNIT_HH__
+#ifndef __MEM_RUBY_NETWORK_GARNET_OUTPUT_UNIT_HH__
+#define __MEM_RUBY_NETWORK_GARNET_OUTPUT_UNIT_HH__
 
 #include <iostream>
 #include <vector>
@@ -96,13 +96,15 @@
 
     uint32_t functionalWrite(Packet *pkt);
 
+    NetworkLink *m_out_link;
+
   private:
     int m_id;
     PortDirection m_direction;
     int m_num_vcs;
     int m_vc_per_vnet;
     Router *m_router;
-    NetworkLink *m_out_link;
+//    NetworkLink *m_out_link;
     CreditLink *m_credit_link;
 
     flitBuffer *m_out_buffer; // This is for the network link to consume
@@ -110,4 +112,4 @@
 
 };
 
-#endif // __MEM_RUBY_NETWORK_GARNET2_0_OUTPUTUNIT_HH__
+#endif // __MEM_RUBY_NETWORK_GARNET_OUTPUT_UNIT_HH__
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/garnet2.0/OutVcState.hh gem5/src/mem/ruby/network/garnet2.0/OutVcState.hh
--- gem5_NGNS/src/mem/ruby/network/garnet2.0/OutVcState.hh	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/garnet2.0/OutVcState.hh	2018-06-19 11:43:30.351721893 -0700
@@ -31,8 +31,8 @@
  */
 
 
-#ifndef __MEM_RUBY_NETWORK_GARNET2_0_OUTVCSTATE_HH__
-#define __MEM_RUBY_NETWORK_GARNET2_0_OUTVCSTATE_HH__
+#ifndef __MEM_RUBY_NETWORK_GARNET_OUTVC_STATE_HH__
+#define __MEM_RUBY_NETWORK_GARNET_OUTVC_STATE_HH__
 
 #include "mem/ruby/network/garnet2.0/CommonTypes.hh"
 #include "mem/ruby/network/garnet2.0/GarnetNetwork.hh"
@@ -67,4 +67,4 @@
     int m_max_credit_count;
 };
 
-#endif //__MEM_RUBY_NETWORK_GARNET2_0_OUTVCSTATE_HH__
+#endif // __MEM_RUBY_NETWORK_GARNET_OUTVC_STATE_HH__
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/garnet2.0/Router.cc gem5/src/mem/ruby/network/garnet2.0/Router.cc
--- gem5_NGNS/src/mem/ruby/network/garnet2.0/Router.cc	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/garnet2.0/Router.cc	2018-09-06 14:04:12.628787592 -0700
@@ -51,6 +51,7 @@
     : BasicRouter(p), Consumer(this)
 {
     m_latency = p->latency;
+    m_outlink_bw_divider = p->outlink_bw_divider; // SEB 
     m_virtual_networks = p->virt_nets;
     m_vc_per_vnet = p->vcs_per_vnet;
     m_num_vcs = m_virtual_networks * m_vc_per_vnet;
@@ -225,7 +226,7 @@
         for (int i = 0; i < m_input_unit.size(); i++) {
             m_buffer_reads += m_input_unit[i]->get_buf_read_activity(j);
             m_buffer_writes += m_input_unit[i]->get_buf_write_activity(j);
-        }
+	}
     }
 
     m_sw_input_arbiter_activity = m_sw_alloc->get_input_arbiter_activity();
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/garnet2.0/Router.hh gem5/src/mem/ruby/network/garnet2.0/Router.hh
--- gem5_NGNS/src/mem/ruby/network/garnet2.0/Router.hh	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/garnet2.0/Router.hh	2018-09-07 12:35:57.623329888 -0700
@@ -31,8 +31,8 @@
  */
 
 
-#ifndef __MEM_RUBY_NETWORK_GARNET2_0_ROUTER_HH__
-#define __MEM_RUBY_NETWORK_GARNET2_0_ROUTER_HH__
+#ifndef __MEM_RUBY_NETWORK_GARNET_ROUTER_HH__
+#define __MEM_RUBY_NETWORK_GARNET_ROUTER_HH__
 
 #include <iostream>
 #include <vector>
@@ -79,6 +79,7 @@
     int get_num_inports()   { return m_input_unit.size(); }
     int get_num_outports()  { return m_output_unit.size(); }
     int get_id()            { return m_id; }
+    int get_m_outlink_bw_divider() {return m_outlink_bw_divider; }
 
     void init_net_ptr(GarnetNetwork* net_ptr)
     {
@@ -116,13 +117,15 @@
 
     uint32_t functionalWrite(Packet *);
 
+    std::vector<OutputUnit *> m_output_unit;
+
   private:
     Cycles m_latency;
     int m_virtual_networks, m_num_vcs, m_vc_per_vnet;
     GarnetNetwork *m_network_ptr;
 
     std::vector<InputUnit *> m_input_unit;
-    std::vector<OutputUnit *> m_output_unit;
+//    std::vector<OutputUnit *> m_output_unit;
     RoutingUnit *m_routing_unit;
     SwitchAllocator *m_sw_alloc;
     CrossbarSwitch *m_switch;
@@ -137,4 +140,4 @@
     Stats::Scalar m_crossbar_activity;
 };
 
-#endif // __MEM_RUBY_NETWORK_GARNET2_0_ROUTER_HH__
+#endif // __MEM_RUBY_NETWORK_GARNET_ROUTER_HH__
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/garnet2.0/RoutingUnit.hh gem5/src/mem/ruby/network/garnet2.0/RoutingUnit.hh
--- gem5_NGNS/src/mem/ruby/network/garnet2.0/RoutingUnit.hh	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/garnet2.0/RoutingUnit.hh	2018-06-19 11:43:30.339721434 -0700
@@ -31,8 +31,8 @@
  */
 
 
-#ifndef __MEM_RUBY_NETWORK_GARNET2_0_ROUTINGUNIT_HH__
-#define __MEM_RUBY_NETWORK_GARNET2_0_ROUTINGUNIT_HH__
+#ifndef __MEM_RUBY_NETWORK_GARNET_ROUTING_UNIT_HH__
+#define __MEM_RUBY_NETWORK_GARNET_ROUTING_UNIT_HH__
 
 #include "mem/ruby/common/Consumer.hh"
 #include "mem/ruby/common/NetDest.hh"
@@ -86,4 +86,4 @@
     std::map<PortDirection, int> m_outports_dirn2idx;
 };
 
-#endif // __MEM_RUBY_NETWORK_GARNET2_0_ROUTINGUNIT_HH__
+#endif // __MEM_RUBY_NETWORK_GARNET_ROUTING_UNIT_HH__
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/garnet2.0/set_time gem5/src/mem/ruby/network/garnet2.0/set_time
--- gem5_NGNS/src/mem/ruby/network/garnet2.0/set_time	1969-12-31 16:00:00.000000000 -0800
+++ gem5/src/mem/ruby/network/garnet2.0/set_time	2018-06-19 11:43:30.331721128 -0700
@@ -0,0 +1,7 @@
+NetworkInterface.cc
+VirtualChannel.cc
+InputUnit.cc
+SwitchAllocator.cc
+NetworkLink.cc
+CrossbarSwitch.cc
+flitBuffer.cc
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/garnet2.0/SwitchAllocator.cc gem5/src/mem/ruby/network/garnet2.0/SwitchAllocator.cc
--- gem5_NGNS/src/mem/ruby/network/garnet2.0/SwitchAllocator.cc	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/garnet2.0/SwitchAllocator.cc	2018-09-07 12:45:01.228467661 -0700
@@ -45,9 +45,11 @@
     m_router = router;
     m_num_vcs = m_router->get_num_vcs();
     m_vc_per_vnet = m_router->get_vc_per_vnet();
+    m_outlink_bw_divider = m_router->get_m_outlink_bw_divider(); // SEB 
 
     m_input_arbiter_activity = 0;
     m_output_arbiter_activity = 0;
+
 }
 
 void
@@ -63,6 +65,11 @@
     m_port_requests.resize(m_num_outports);
     m_vc_winners.resize(m_num_outports);
 
+    for(int i = 0; i < m_num_outports; i++){ // SEB
+      m_outputPort outport; // SEB
+      m_outports.push_back(outport); // SEB
+    }
+  
     for (int i = 0; i < m_num_inports; i++) {
         m_round_robin_invc[i] = 0;
     }
@@ -79,6 +86,20 @@
     }
 }
 
+//SEB
+void
+SwitchAllocator::decrement_counters(){
+
+	int cycles_passed = uint64_t(m_router->curCycle() - m_previous_cycle);  
+	for(int i = 0; i < m_outports.size(); i++){
+		if(m_outports.at(i).counter != 0 && m_outports.at(i).counter > cycles_passed){
+			m_outports.at(i).counter = m_outports.at(i).counter - cycles_passed;
+		} else {
+			m_outports.at(i).counter = 0; 
+		}
+	}
+}
+
 /*
  * The wakeup function of the SwitchAllocator performs a 2-stage
  * seperable switch allocation. At the end of the 2nd stage, a free
@@ -91,6 +112,11 @@
 void
 SwitchAllocator::wakeup()
 {
+    //TODO SEB: decrement counters 
+    //It seems like wakeup() is called when there's a new event in the event queue -> we need a notion of the current tick/cycle
+    //If we had, we could do current_tick - previous_tick and decrement the counter by that value
+    decrement_counters();
+
     arbitrate_inports(); // First stage of allocation
     arbitrate_outports(); // Second stage of allocation
 
@@ -128,10 +154,13 @@
 
                 // check if the flit in this InputVC is allowed to be sent
                 // send_allowed conditions described in that function.
+    	 	// SEB: TECHNICALLY, YOU COULD SAY HERE IT IS ALLOWED TO MAKE REQUEST IF OUTLINK IS NOT BUSY
                 bool make_request =
                     send_allowed(inport, invc, outport, outvc);
 
-                if (make_request) {
+		bool is_outport_free = m_outports.at(outport).counter == 0; // SEB
+
+                if (make_request && is_outport_free) { // SEB
                     m_input_arbiter_activity++;
                     m_port_requests[outport][inport] = true;
                     m_vc_winners[outport][inport]= invc;
@@ -184,6 +213,10 @@
                 // grant this outport to this inport
                 int invc = m_vc_winners[outport][inport];
 
+//  		m_outports.at(outport).counter = m_outlink_bw_divider; // SEB 
+	        m_outports.at(outport).counter = m_router->m_output_unit.at(outport)->m_out_link->get_bw_factor();
+
+
                 int outvc = m_input_unit[inport]->get_outvc(invc);
                 if (outvc == -1) {
                     // VC Allocation - select any free VC from outport
@@ -239,7 +272,7 @@
 
                     // Send a credit back
                     // along with the information that this VC is now idle
-                    m_input_unit[inport]->increment_credit(invc, true,
+		    m_input_unit[inport]->increment_credit(invc, true,
                         m_router->curCycle());
                 } else {
                     // Send a credit back
@@ -355,7 +388,14 @@
 void
 SwitchAllocator::check_for_wakeup()
 {
-    Cycles nextCycle = m_router->curCycle() + Cycles(1);
+    //****SEB****: THIS WAKES UP ROUTER FOR SA IN NEXT CYCLE (nextCycle and schedule_wakeup) 
+    //             If you delay this, this would ultimately model lower output link BW 
+    //             because next flit can only be arbitrated if current flit is sent 
+    //             Note: what really happens is that crossbarswitch and outputunit treat it as 
+    //                   same link BW as router, but delaying the SA increases queuing and models BW
+    Cycles nextCycle = m_router->curCycle() + Cycles(1);  
+    m_previous_cycle = m_router->curCycle(); // SEB
+   // std::cout << "m_outlink_bw_divider " <<m_outlink_bw_divider << std::endl;
 
     for (int i = 0; i < m_num_inports; i++) {
         for (int j = 0; j < m_num_vcs; j++) {
@@ -393,4 +433,4 @@
 {
     m_input_arbiter_activity = 0;
     m_output_arbiter_activity = 0;
-}
\ No newline at end of file
+}
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/garnet2.0/SwitchAllocator.hh gem5/src/mem/ruby/network/garnet2.0/SwitchAllocator.hh
--- gem5_NGNS/src/mem/ruby/network/garnet2.0/SwitchAllocator.hh	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/garnet2.0/SwitchAllocator.hh	2018-09-06 12:57:54.932970720 -0700
@@ -31,8 +31,8 @@
  */
 
 
-#ifndef __MEM_RUBY_NETWORK_GARNET2_0_SWITCHALLOCATOR_HH__
-#define __MEM_RUBY_NETWORK_GARNET2_0_SWITCHALLOCATOR_HH__
+#ifndef __MEM_RUBY_NETWORK_GARNET_SWITCH_ALLOCATOR_HH__
+#define __MEM_RUBY_NETWORK_GARNET_SWITCH_ALLOCATOR_HH__
 
 #include <iostream>
 #include <vector>
@@ -47,6 +47,9 @@
 class SwitchAllocator : public Consumer
 {
   public:
+    struct m_outputPort{int counter = 0;}; // SEB: counter = 0 means it's unoccupied initially 
+    std::vector<m_outputPort> m_outports; // SEB: holds all output ports 
+
     SwitchAllocator(Router *router);
     void wakeup();
     void init();
@@ -58,6 +61,8 @@
     void arbitrate_outports();
     bool send_allowed(int inport, int invc, int outport, int outvc);
     int vc_allocate(int outport, int inport, int invc);
+    Cycles m_previous_cycle = Cycles(0); // SEB
+    void decrement_counters(); // SEB
 
     inline double
     get_input_arbiter_activity()
@@ -75,7 +80,7 @@
   private:
     int m_num_inports, m_num_outports;
     int m_num_vcs, m_vc_per_vnet;
-
+    int m_outlink_bw_divider;  //SEB 
     double m_input_arbiter_activity, m_output_arbiter_activity;
 
     Router *m_router;
@@ -87,4 +92,4 @@
     std::vector<OutputUnit *> m_output_unit;
 };
 
-#endif // __MEM_RUBY_NETWORK_GARNET2_0_SWITCHALLOCATOR_HH__
+#endif // __MEM_RUBY_NETWORK_GARNET_SWITCH_ALLOCATOR_HH__
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/garnet2.0/VirtualChannel.hh gem5/src/mem/ruby/network/garnet2.0/VirtualChannel.hh
--- gem5_NGNS/src/mem/ruby/network/garnet2.0/VirtualChannel.hh	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/garnet2.0/VirtualChannel.hh	2018-06-19 11:43:30.315720518 -0700
@@ -31,8 +31,8 @@
  */
 
 
-#ifndef __MEM_RUBY_NETWORK_GARNET2_0_VIRTUALCHANNEL_HH__
-#define __MEM_RUBY_NETWORK_GARNET2_0_VIRTUALCHANNEL_HH__
+#ifndef __MEM_RUBY_NETWORK_GARNET_VIRTUAL_CHANNEL_HH__
+#define __MEM_RUBY_NETWORK_GARNET_VIRTUAL_CHANNEL_HH__
 
 #include <utility>
 
@@ -98,4 +98,4 @@
     int m_output_vc;
 };
 
-#endif // __MEM_RUBY_NETWORK_GARNET2_0_VIRTUALCHANNEL_HH__
+#endif // __MEM_RUBY_NETWORK_GARNET_VIRTUAL_CHANNEL_HH__
diff -ruN '--exclude=.git' gem5_NGNS/src/mem/ruby/network/Topology.cc gem5/src/mem/ruby/network/Topology.cc
--- gem5_NGNS/src/mem/ruby/network/Topology.cc	2019-01-23 16:20:32.247067856 -0800
+++ gem5/src/mem/ruby/network/Topology.cc	2018-03-02 11:00:05.594225877 -0800
@@ -51,8 +51,7 @@
 Topology::Topology(uint32_t num_routers,
                    const vector<BasicExtLink *> &ext_links,
                    const vector<BasicIntLink *> &int_links)
-    : m_nodes(MachineType_base_number(MachineType_NUM)),
-      m_number_of_switches(num_routers),
+    : m_nodes(ext_links.size()), m_number_of_switches(num_routers),
       m_ext_link_vector(ext_links), m_int_link_vector(int_links)
 {
     // Total nodes/controllers in network
